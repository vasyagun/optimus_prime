import asyncio
import json
import websockets
import requests
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã

TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMDo3NDZhYzE5ZWY3OWU1YmIzN2I2YWQ3YjdmMTRkNmMzNzhlNWYzZGY5ZTZkY2Q2NTA3Y2IxOTM1NDg3ZDczOWU3IiwiZXhwIjoyMDYwOTMwMTU4fQ.tJX-x6nkGs0W_BH74berAxGC0kVl5AZRYUrSYz23uXU"  # –æ–±—Ä–µ–∂—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
USER_ID = 21625
WS_URL = f"wss://api-game.gramilla.world/ws?token={TOKEN}"
MAP_URL = "https://api-game.gramilla.world/currentMap"
UPDATE_INTERVAL = 30  # —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–ª–µ—Ç–æ–∫

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MY_CELLS = set()
applied_cells = set()

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫
async def update_my_cells_periodically():
    global MY_CELLS
    while True:
        try:
            resp = requests.get(MAP_URL)
            resp.raise_for_status()
            data = resp.json()
            updated_cells = set()
            for cell in data.get("cells", []):
                if cell.get("user_id") == USER_ID:
                    updated_cells.add(cell["id"])
            MY_CELLS = updated_cells
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {len(MY_CELLS)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–µ—Ç–æ–∫: {e}")
        await asyncio.sleep(UPDATE_INTERVAL)

# –§–æ–Ω–æ–≤—ã–π ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def send_ping_periodically(websocket):
    while True:
        try:
            ping = {
                "type": "ping",
                "token": TOKEN
            }
            await websocket.send(json.dumps(ping))
            # print("üì° Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: {e}")
        await asyncio.sleep(20)  # –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket
async def listen():
    async with websockets.connect(WS_URL) as websocket:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket")

        # –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ping'–æ–≤
        asyncio.create_task(send_ping_periodically(websocket))

        while True:
            try:
                message = await websocket.recv()
                data = json.loads(message)
                msg_type = data.get("type")

                if msg_type == "cell_update":
                    cell_id = data["data"]["cell_id"]
                    hp = data["data"]["hp"]
                    if cell_id in MY_CELLS and cell_id not in applied_cells:
                        print(f"‚ö†Ô∏è –ö–ª–µ—Ç–∫–∞ {cell_id} —Ç–µ—Ä—è–µ—Ç HP ({hp}) ‚Äî –∞—Ç–∞–∫–∞!")
                        await apply_shield(websocket, cell_id)

                elif msg_type == "map_cell_update":
                    cell = data["data"]
                    if cell.get("user_id") == USER_ID and cell.get("under_attack"):
                        cell_id = cell["id"]
                        if cell_id not in applied_cells:
                            print(f"üö® –ö–ª–µ—Ç–∫–∞ {cell_id} –ø–æ–¥ –∞—Ç–∞–∫–æ–π (under_attack = true)")
                            await apply_shield(websocket, cell_id)

                elif msg_type == "attack_started":
                    attack = data["data"]
                    cell_id = attack.get("cell_id")
                    if attack.get("cell_owner_id") == USER_ID and cell_id not in applied_cells:
                        print(f"üî• –ê—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É {cell_id} –æ—Ç {attack.get('attacker_nickname')}")
                        await apply_shield(websocket, cell_id)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —â–∏—Ç–∞
async def apply_shield(websocket, cell_id):
    msg = {
        "type": "apply_shield",
        "hours": 1,
        "cell_id": cell_id,
        "token": TOKEN
    }
    await websocket.send(json.dumps(msg))
    applied_cells.add(cell_id)
    print(f"üõ°Ô∏è –©–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫—É {cell_id}")

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
async def main():
    # –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
    asyncio.create_task(update_my_cells_periodically())
    # –°—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–æ—Å–ª—É—à–∫—É WebSocket
    await listen()

if __name__ == "__main__":
    asyncio.run(main())